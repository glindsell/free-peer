// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chaincode.proto

package chat

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type ChatRequest struct {
	Input                string   `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	IsTX                 bool     `protobuf:"varint,2,opt,name=isTX,proto3" json:"isTX,omitempty"`
	TxID                 int32    `protobuf:"varint,3,opt,name=txID,proto3" json:"txID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatRequest) Reset()         { *m = ChatRequest{} }
func (m *ChatRequest) String() string { return proto.CompactTextString(m) }
func (*ChatRequest) ProtoMessage()    {}
func (*ChatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_97136ef4b384cc22, []int{0}
}

func (m *ChatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatRequest.Unmarshal(m, b)
}
func (m *ChatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatRequest.Marshal(b, m, deterministic)
}
func (m *ChatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatRequest.Merge(m, src)
}
func (m *ChatRequest) XXX_Size() int {
	return xxx_messageInfo_ChatRequest.Size(m)
}
func (m *ChatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChatRequest proto.InternalMessageInfo

func (m *ChatRequest) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *ChatRequest) GetIsTX() bool {
	if m != nil {
		return m.IsTX
	}
	return false
}

func (m *ChatRequest) GetTxID() int32 {
	if m != nil {
		return m.TxID
	}
	return 0
}

// The response message containing the greetings
type ChatResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	TxID                 int32    `protobuf:"varint,2,opt,name=txID,proto3" json:"txID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatResponse) Reset()         { *m = ChatResponse{} }
func (m *ChatResponse) String() string { return proto.CompactTextString(m) }
func (*ChatResponse) ProtoMessage()    {}
func (*ChatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_97136ef4b384cc22, []int{1}
}

func (m *ChatResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatResponse.Unmarshal(m, b)
}
func (m *ChatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatResponse.Marshal(b, m, deterministic)
}
func (m *ChatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatResponse.Merge(m, src)
}
func (m *ChatResponse) XXX_Size() int {
	return xxx_messageInfo_ChatResponse.Size(m)
}
func (m *ChatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChatResponse proto.InternalMessageInfo

func (m *ChatResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ChatResponse) GetTxID() int32 {
	if m != nil {
		return m.TxID
	}
	return 0
}

func init() {
	proto.RegisterType((*ChatRequest)(nil), "chat.ChatRequest")
	proto.RegisterType((*ChatResponse)(nil), "chat.ChatResponse")
}

func init() { proto.RegisterFile("chaincode.proto", fileDescriptor_97136ef4b384cc22) }

var fileDescriptor_97136ef4b384cc22 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x50, 0xb1, 0x4a, 0x04, 0x31,
	0x14, 0x34, 0xe7, 0x9e, 0x7a, 0x4f, 0x41, 0x7c, 0x28, 0x04, 0xab, 0x65, 0xb1, 0x48, 0x15, 0xc4,
	0x6b, 0xad, 0x56, 0x1b, 0xb1, 0x39, 0xa2, 0x85, 0x6d, 0x8c, 0x8f, 0xdb, 0x80, 0xb7, 0x89, 0x9b,
	0xac, 0xec, 0xe7, 0x4b, 0x12, 0xf5, 0xb6, 0x9b, 0x19, 0x66, 0x26, 0x93, 0x07, 0xe7, 0xa6, 0xd3,
	0xb6, 0x37, 0xee, 0x83, 0xa4, 0x1f, 0x5c, 0x74, 0x58, 0x99, 0x4e, 0xc7, 0xe6, 0x19, 0x4e, 0x1f,
	0x3a, 0x1d, 0x15, 0x7d, 0x8d, 0x14, 0x22, 0x5e, 0xc2, 0xd2, 0xf6, 0x7e, 0x8c, 0x9c, 0xd5, 0x4c,
	0xac, 0x54, 0x21, 0x88, 0x50, 0xd9, 0xf0, 0xfa, 0xc6, 0x17, 0x35, 0x13, 0x27, 0x2a, 0xe3, 0xa4,
	0xc5, 0xe9, 0xe9, 0x91, 0x1f, 0xd6, 0x4c, 0x2c, 0x55, 0xc6, 0xcd, 0x3d, 0x9c, 0x95, 0xb2, 0xe0,
	0x5d, 0x1f, 0x08, 0x39, 0x1c, 0xef, 0x28, 0x04, 0xbd, 0xa5, 0xdf, 0xbe, 0x3f, 0xfa, 0x9f, 0x5e,
	0xec, 0xd3, 0x77, 0x6d, 0x99, 0xf2, 0x42, 0xc3, 0xb7, 0x35, 0x84, 0x6b, 0xa8, 0x12, 0xc5, 0x0b,
	0x99, 0x86, 0xca, 0xd9, 0xca, 0x6b, 0x9c, 0x4b, 0xe5, 0xad, 0xe6, 0x40, 0xb0, 0x5b, 0xd6, 0xde,
	0xc0, 0x95, 0x75, 0x72, 0x3b, 0x78, 0x23, 0x69, 0xd2, 0x3b, 0xff, 0x49, 0x21, 0x7b, 0xdb, 0x55,
	0x32, 0x6f, 0xd2, 0xc7, 0x37, 0xec, 0xfd, 0x28, 0x5f, 0x60, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff,
	0x0b, 0xb0, 0xd9, 0x3f, 0x14, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	// Sends a greeting
	Chat(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatClient, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatService_serviceDesc.Streams[0], "/chat.ChatService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceChatClient{stream}
	return x, nil
}

type ChatService_ChatClient interface {
	Send(*ChatRequest) error
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type chatServiceChatClient struct {
	grpc.ClientStream
}

func (x *chatServiceChatClient) Send(m *ChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceChatClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	// Sends a greeting
	Chat(ChatService_ChatServer) error
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).Chat(&chatServiceChatServer{stream})
}

type ChatService_ChatServer interface {
	Send(*ChatResponse) error
	Recv() (*ChatRequest, error)
	grpc.ServerStream
}

type chatServiceChatServer struct {
	grpc.ServerStream
}

func (x *chatServiceChatServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceChatServer) Recv() (*ChatRequest, error) {
	m := new(ChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _ChatService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chaincode.proto",
}
