// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chaincode.proto

package chaincode

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type ChaincodeRequest struct {
	Input                string   `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	IsTX                 bool     `protobuf:"varint,2,opt,name=isTX,proto3" json:"isTX,omitempty"`
	TxID                 int32    `protobuf:"varint,3,opt,name=txID,proto3" json:"txID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChaincodeRequest) Reset()         { *m = ChaincodeRequest{} }
func (m *ChaincodeRequest) String() string { return proto.CompactTextString(m) }
func (*ChaincodeRequest) ProtoMessage()    {}
func (*ChaincodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_97136ef4b384cc22, []int{0}
}

func (m *ChaincodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChaincodeRequest.Unmarshal(m, b)
}
func (m *ChaincodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChaincodeRequest.Marshal(b, m, deterministic)
}
func (m *ChaincodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChaincodeRequest.Merge(m, src)
}
func (m *ChaincodeRequest) XXX_Size() int {
	return xxx_messageInfo_ChaincodeRequest.Size(m)
}
func (m *ChaincodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChaincodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChaincodeRequest proto.InternalMessageInfo

func (m *ChaincodeRequest) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *ChaincodeRequest) GetIsTX() bool {
	if m != nil {
		return m.IsTX
	}
	return false
}

func (m *ChaincodeRequest) GetTxID() int32 {
	if m != nil {
		return m.TxID
	}
	return 0
}

// The response message containing the greetings
type ChaincodeResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	TxID                 int32    `protobuf:"varint,2,opt,name=txID,proto3" json:"txID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChaincodeResponse) Reset()         { *m = ChaincodeResponse{} }
func (m *ChaincodeResponse) String() string { return proto.CompactTextString(m) }
func (*ChaincodeResponse) ProtoMessage()    {}
func (*ChaincodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_97136ef4b384cc22, []int{1}
}

func (m *ChaincodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChaincodeResponse.Unmarshal(m, b)
}
func (m *ChaincodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChaincodeResponse.Marshal(b, m, deterministic)
}
func (m *ChaincodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChaincodeResponse.Merge(m, src)
}
func (m *ChaincodeResponse) XXX_Size() int {
	return xxx_messageInfo_ChaincodeResponse.Size(m)
}
func (m *ChaincodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChaincodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChaincodeResponse proto.InternalMessageInfo

func (m *ChaincodeResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ChaincodeResponse) GetTxID() int32 {
	if m != nil {
		return m.TxID
	}
	return 0
}

func init() {
	proto.RegisterType((*ChaincodeRequest)(nil), "chaincode.ChaincodeRequest")
	proto.RegisterType((*ChaincodeResponse)(nil), "chaincode.ChaincodeResponse")
}

func init() { proto.RegisterFile("chaincode.proto", fileDescriptor_97136ef4b384cc22) }

var fileDescriptor_97136ef4b384cc22 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0xce, 0x48, 0xcc,
	0xcc, 0x4b, 0xce, 0x4f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0x05, 0x70, 0x09, 0x38, 0xc3, 0x38, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x22, 0x5c,
	0xac, 0x99, 0x79, 0x05, 0xa5, 0x25, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x10, 0x8e, 0x90,
	0x10, 0x17, 0x4b, 0x66, 0x71, 0x48, 0x84, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x47, 0x10, 0x98, 0x0d,
	0x12, 0x2b, 0xa9, 0xf0, 0x74, 0x91, 0x60, 0x56, 0x60, 0xd4, 0x60, 0x0d, 0x02, 0xb3, 0x95, 0x1c,
	0xb9, 0x04, 0x91, 0x4c, 0x2c, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x92, 0xe0, 0x62, 0xcf, 0x4d,
	0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x85, 0x1a, 0x0a, 0xe3, 0xc2, 0x8d, 0x60, 0x42, 0x18, 0x61, 0x14,
	0xcb, 0xc5, 0x09, 0x37, 0x42, 0x28, 0x80, 0x8b, 0x17, 0xce, 0x71, 0xce, 0x48, 0x2c, 0x11, 0x92,
	0xd6, 0x43, 0xf8, 0x07, 0xdd, 0xed, 0x52, 0x32, 0xd8, 0x25, 0x21, 0xce, 0x50, 0x62, 0xd0, 0x60,
	0x34, 0x60, 0x74, 0xd2, 0xe3, 0x92, 0xca, 0xcc, 0xd7, 0x4b, 0x2f, 0x2a, 0x48, 0xd6, 0x4b, 0xad,
	0x48, 0xcc, 0x2d, 0xc8, 0x49, 0x2d, 0x46, 0xe8, 0x72, 0xe2, 0x83, 0x6b, 0x0b, 0x00, 0x05, 0x56,
	0x00, 0x63, 0x12, 0x1b, 0x38, 0xd4, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x9b, 0x9d,
	0xf1, 0x48, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChaincodeClient is the client API for Chaincode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChaincodeClient interface {
	// Sends a greeting
	ChaincodeChat(ctx context.Context, opts ...grpc.CallOption) (Chaincode_ChaincodeChatClient, error)
}

type chaincodeClient struct {
	cc *grpc.ClientConn
}

func NewChaincodeClient(cc *grpc.ClientConn) ChaincodeClient {
	return &chaincodeClient{cc}
}

func (c *chaincodeClient) ChaincodeChat(ctx context.Context, opts ...grpc.CallOption) (Chaincode_ChaincodeChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chaincode_serviceDesc.Streams[0], "/chaincode.Chaincode/ChaincodeChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chaincodeChaincodeChatClient{stream}
	return x, nil
}

type Chaincode_ChaincodeChatClient interface {
	Send(*ChaincodeRequest) error
	Recv() (*ChaincodeResponse, error)
	grpc.ClientStream
}

type chaincodeChaincodeChatClient struct {
	grpc.ClientStream
}

func (x *chaincodeChaincodeChatClient) Send(m *ChaincodeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chaincodeChaincodeChatClient) Recv() (*ChaincodeResponse, error) {
	m := new(ChaincodeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChaincodeServer is the server API for Chaincode service.
type ChaincodeServer interface {
	// Sends a greeting
	ChaincodeChat(Chaincode_ChaincodeChatServer) error
}

func RegisterChaincodeServer(s *grpc.Server, srv ChaincodeServer) {
	s.RegisterService(&_Chaincode_serviceDesc, srv)
}

func _Chaincode_ChaincodeChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChaincodeServer).ChaincodeChat(&chaincodeChaincodeChatServer{stream})
}

type Chaincode_ChaincodeChatServer interface {
	Send(*ChaincodeResponse) error
	Recv() (*ChaincodeRequest, error)
	grpc.ServerStream
}

type chaincodeChaincodeChatServer struct {
	grpc.ServerStream
}

func (x *chaincodeChaincodeChatServer) Send(m *ChaincodeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chaincodeChaincodeChatServer) Recv() (*ChaincodeRequest, error) {
	m := new(ChaincodeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Chaincode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chaincode.Chaincode",
	HandlerType: (*ChaincodeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChaincodeChat",
			Handler:       _Chaincode_ChaincodeChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chaincode.proto",
}
